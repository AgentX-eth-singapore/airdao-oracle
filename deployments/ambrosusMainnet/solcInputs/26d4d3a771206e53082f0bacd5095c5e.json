{
  "language": "Solidity",
  "sources": {
    "contracts/predictEarn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract PredictAndEarn {\n    address public admin;\n    address public oracleAddress;\n    bool public marketResolved;\n    string public marketQuestion;\n    string public correctOutcome;\n\n    struct Outcome {\n        string name;\n        uint256 totalBets;\n        mapping(address => uint256) bets;\n    }\n\n    Outcome public outcomeA;\n    Outcome public outcomeB;\n\n    IERC20 public usdcToken;\n\n    event BetPlaced(address indexed bettor, string outcome, uint256 amount);\n    event MarketResolved(string correctOutcome);\n    event WinningsWithdrawn(address indexed user, uint256 amount);\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can perform this action\");\n        _;\n    }\n\n    modifier onlyOracle() {\n        require(msg.sender == oracleAddress, \"Unauthorized oracle\");\n        _;\n    }\n\n    modifier marketNotResolved() {\n        require(!marketResolved, \"Market already resolved\");\n        _;\n    }\n\n    constructor(address _usdcTokenAddress, address _oracleAddress, string memory _question, string memory _outcomeA, string memory _outcomeB) {\n        admin = msg.sender;\n        usdcToken = IERC20(_usdcTokenAddress);\n        oracleAddress = _oracleAddress;\n        marketQuestion = _question;\n        outcomeA.name = _outcomeA;\n        outcomeB.name = _outcomeB;\n    }\n\n    function placeBet(string memory outcomeName, uint256 amount) external marketNotResolved {\n        require(amount > 0, \"Bet amount must be greater than zero\");\n        require(keccak256(bytes(outcomeName)) == keccak256(bytes(outcomeA.name)) || keccak256(bytes(outcomeName)) == keccak256(bytes(outcomeB.name)), \"Invalid outcome name\");\n\n        usdcToken.transferFrom(msg.sender, address(this), amount);\n\n        if (keccak256(bytes(outcomeName)) == keccak256(bytes(outcomeA.name))) {\n            outcomeA.bets[msg.sender] += amount;\n            outcomeA.totalBets += amount;\n        } else {\n            outcomeB.bets[msg.sender] += amount;\n            outcomeB.totalBets += amount;\n        }\n\n        emit BetPlaced(msg.sender, outcomeName, amount);\n    }\n\n    // Oracle callback function to resolve the market\n    function oracleCallback(string memory _correctOutcome) external onlyOracle marketNotResolved {\n        require(keccak256(bytes(_correctOutcome)) == keccak256(bytes(outcomeA.name)) || keccak256(bytes(_correctOutcome)) == keccak256(bytes(outcomeB.name)), \"Invalid outcome name\");\n\n        correctOutcome = _correctOutcome;\n        marketResolved = true;\n\n        emit MarketResolved(_correctOutcome);\n    }\n\n    function withdrawWinnings() external {\n        require(marketResolved, \"Market not resolved yet\");\n        uint256 winnings;\n\n        if (keccak256(bytes(correctOutcome)) == keccak256(bytes(outcomeA.name))) {\n            require(outcomeA.bets[msg.sender] > 0, \"No bets placed on the winning outcome\");\n            winnings = calculateWinnings(outcomeA.bets[msg.sender], outcomeA.totalBets, outcomeB.totalBets);\n            outcomeA.bets[msg.sender] = 0;\n        } else {\n            require(outcomeB.bets[msg.sender] > 0, \"No bets placed on the winning outcome\");\n            winnings = calculateWinnings(outcomeB.bets[msg.sender], outcomeB.totalBets, outcomeA.totalBets);\n            outcomeB.bets[msg.sender] = 0;\n        }\n\n        usdcToken.transfer(msg.sender, winnings);\n        emit WinningsWithdrawn(msg.sender, winnings);\n    }\n\n    function calculateWinnings(uint256 userBet, uint256 totalWinnerBets, uint256 totalLoserBets) internal pure returns (uint256) {\n        return (userBet * totalLoserBets) / totalWinnerBets;\n    }\n\n    // Function for encoding the callback, for oracle registration\n    function getEncodedCallback() public pure returns (bytes memory) {\n        return abi.encodeWithSignature(\"oracleCallback(string)\");\n    }\n\n    function getContractBalance() external view returns (uint256) {\n        return usdcToken.balanceOf(address(this));\n    }\n\n    // Admin can update oracle address \n    function setOracleAddress(address _newOracle) external onlyAdmin {\n        oracleAddress = _newOracle;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}